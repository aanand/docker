// Code generated by go-bindata.
// sources:
// data/config_schema_v2.1.json
// DO NOT EDIT!

package schema

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataConfig_schema_v21Json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x59\x4f\xb3\xdb\x26\x10\xbf\xfb\x53\xbc\x51\x72\x8b\xff\xa4\x9d\x4c\x67\x9a\x5b\x8f\x3d\xb5\xe7\x7a\x54\x0d\x96\xb0\x4d\x22\x01\x01\xe4\xd4\xc9\xf8\xbb\x17\x84\x84\x01\x81\x90\xdf\x53\xfb\x7a\xe8\xe5\xcd\x1b\xf1\xdb\x65\x77\xd9\xfd\xed\x82\xbf\xaf\x9e\x9e\xb2\xb7\xbc\x3c\xc3\x06\x64\x1f\x9f\xb2\xb3\x10\xf4\xe3\x6e\xf7\x89\x13\xbc\xd1\x5f\xb7\x84\x9d\x76\x15\x03\x47\xb1\x79\xff\x61\xa7\xbf\xbd\xc9\xd6\x4a\x0e\x55\x4a\xa4\x24\xf8\x88\x4e\x85\x5e\x29\x2e\x3f\x6e\x7f\xd8\x2a\x71\x0d\x11\x57\x0a\x15\x88\x1c\x3e\xc1\x52\xe8\x6f\x0c\x7e\x69\x11\x83\x4a\x78\x9f\x5d\x20\xe3\x48\xa2\xf3\xf5\x4a\xad\x51\x46\x28\x64\x02\x41\x2e\x57\x95\x71\xf2\xdb\x00\x19\x3e\x58\x6a\xb9\x60\x08\x9f\xb2\xee\xf3\xad\xd3\x20\x17\x39\x64\x17\x54\x5a\x1a\x8c\xa9\x6f\x76\x77\xfd\x3b\x03\x5b\xfb\x5a\x2d\x63\xbb\xef\x14\x08\x01\x19\xfe\x7d\x6c\x5b\xb7\xfc\xe7\x1e\x6c\xbe\xfd\xb2\xf9\xe3\xfd\xe6\xe7\x6d\xb1\xc9\xdf\xbd\x75\x96\x55\x7c\x19\x3c\xea\xed\x2b\x78\x44\x18\x09\xe9\x8d\xd9\x3f\x33\xc8\x5b\xff\xdf\xcd\x6c\x0c\xaa\xaa\x03\x83\xda\xd9\xfb\x08\x6a\x0e\x5d\x9f\x31\x14\x5f\x09\xfb\x9c\xf2\xd9\xc0\x5e\xc9\xe7\x7e\xff\x80\xcf\xae\x3b\x17\x52\xb7\x4d\xf2\x04\x07\xd4\x2b\x39\xa3\xb7\x7f\xd9\xf9\xad\x06\xa7\x27\xb1\x1a\x61\xed\xdd\x19\xe8\x64\x7b\x28\x54\xa1\x6c\x8b\xc7\xca\x04\x2b\x12\xa5\x12\xd0\x42\x1a\xa9\x3e\x1a\x61\xc0\x18\xb8\x66\x6b\xb9\xa5\x80\x0d\x77\x96\xfa\xd2\xbc\xc9\xc5\x16\xa3\x2f\x2d\xfc\xb5\x87\x08\xd6\x42\x13\xa2\x5e\x6f\x25\xf7\x5c\x5e\xf1\x89\x91\x96\x16\x14\x30\x88\x45\x58\x85\x05\x26\x4d\x03\x70\xe5\x9f\x3c\xc1\xf0\x37\x75\xf4\x7b\xeb\xe3\xd3\xa4\x26\x77\x7d\x86\x1f\x37\x4b\x34\xbf\x27\x93\x63\x1b\x16\x00\x61\xc8\x0a\x0c\x1a\x98\xf2\xa4\x82\x14\xe2\x8a\x17\x9a\x31\x23\xb9\x5b\x23\x2e\x0a\x72\x2c\xb4\x3c\xf7\x14\x18\xfa\x5c\xf4\x3c\x2a\x9d\xb7\x31\x3a\xec\xd4\x14\x84\x15\xca\xb6\xcc\x13\x2c\x38\x04\xac\x3c\x3f\x53\x9e\x34\x32\x7c\x73\x62\x27\x13\x85\x5d\x29\x41\x3a\x5f\xfe\x73\x89\x00\xf1\xa5\x38\xa2\x1a\x3e\x2f\x0c\x52\x1a\x31\x82\x9b\xa1\x1a\xa6\x32\x83\x15\x15\x2a\x3b\x71\x4b\xfe\x2f\x4a\x38\xf4\x03\xe3\x39\x68\x2f\x19\x57\x9d\x98\x0c\x12\xfb\xc1\x71\x19\x14\xdc\x36\x07\xc8\xd4\x10\xe0\x20\x8f\x84\x35\x40\x19\x3b\xec\x6d\x2d\x3b\x91\x0e\x64\x9e\x1d\x40\xdb\x07\xd5\x08\x40\x2d\xa3\x83\x3f\x2f\x9f\xe2\x52\x3d\x03\xc5\x99\x70\x31\x95\xea\x7e\x88\x8d\xb8\x12\x9c\x93\xa6\xa8\x01\xa7\x34\x88\x96\x29\x48\x0d\x0e\xb0\x7e\x96\xa5\x8b\x86\xcf\x52\x4b\x4e\x27\x05\x8d\xe5\xcc\xa8\x5b\xf5\xcb\x91\x9e\x65\xd6\x2b\x86\xe4\x14\x99\x08\x87\x41\x13\x6a\x9a\xac\xbf\xf1\xcd\x41\x7b\xc2\xe9\x7e\x3f\xca\xc7\x06\x94\xaa\xa9\x32\xc8\x23\x21\xb3\xa0\xb0\x91\x59\xdb\x20\xa7\x95\xed\x87\xd2\x59\x1b\x99\xdc\x13\xe2\x5f\x65\x83\x7d\x58\xb0\x9f\xd4\x8a\x86\x54\xb1\x4c\x1b\x81\xfd\xe0\x47\x49\xf3\xe1\x9e\xd4\x89\x79\x07\x15\x9b\xf6\xcc\xfa\xf4\xd4\x67\x60\xa9\xe9\x2f\xe1\x4d\xcc\xbc\xb9\x66\xde\xcd\x9d\xb6\xd3\xe0\x40\x8d\x00\x87\xe9\xaa\x8d\x06\xd2\xd1\x86\xe8\xe5\xc3\xcc\x0c\x0c\xc9\xfe\x34\x29\x1b\x11\x8d\xea\x9c\x57\x40\x33\x54\xdd\x4d\xc1\x6d\x5d\x07\x0d\xc9\x47\xdf\x7c\xd4\x48\xf7\x7c\xf3\xd2\xad\x9c\xa2\xca\x2d\x47\xbb\x19\x4a\x93\x73\xa7\xc0\x28\x61\x62\x54\x5d\xff\x4e\xe7\xd5\x5b\xbf\xb8\xf1\x52\xc9\xc0\x72\x72\x39\x41\xf7\x02\x71\x20\xa4\x86\x00\x3b\x44\xc7\x20\xa8\xe4\xf4\x5a\x5f\x67\x20\xb9\x00\x2c\x39\xdb\x73\x58\xb6\x0c\x89\x6b\x21\x89\x7d\xf1\x96\xcf\xcf\x4d\xc1\xd1\x37\xf8\x08\xb9\x72\x51\x21\x2c\xad\x81\x38\xe9\x22\x17\x84\x4a\xfd\x27\x99\x73\x29\x37\x45\x43\x8f\xcf\x9c\xb0\x85\x48\x07\xbb\xed\x7a\x48\x34\x0b\x03\xf4\x36\x83\x81\x35\xfb\x86\x49\x77\x82\x70\xef\x96\xca\x51\x5d\x26\x15\x0b\xf1\x54\x90\xc4\xb5\xdc\x14\x19\xcf\x21\xe2\xec\x0c\x98\x9b\xc8\x13\x76\x74\x02\x9c\x1c\x45\x58\x20\x80\x0f\x2a\x71\xdf\xcd\x3a\x7d\xeb\xde\x90\x3c\x88\x7f\x88\x4c\x7d\x33\xf2\x28\x9f\xdd\x82\x7c\xd6\xf2\xe4\x7c\x65\xbf\xea\x2c\x5a\x82\x5a\x6f\x31\x6b\xc8\xcb\xd4\xa0\xa2\xca\xa0\x42\x61\xe8\xfd\x11\x67\x78\x10\xd1\x17\x6a\x88\xcb\xd1\x93\x88\x3f\x5d\xed\xad\x21\x2d\x5f\x79\x41\x7a\xfc\x35\x2f\x4b\xbc\xe9\x0c\x30\xff\x4d\x67\x6f\xd2\x7b\x68\x26\xeb\xd4\xe3\xce\xbc\xd8\x69\x94\xa2\xd1\xc5\x69\x60\xab\x29\x60\xaa\x45\xa5\x93\x10\x51\xd0\x3c\x64\xd8\x84\x45\xb3\xaf\x0c\xfd\x03\x78\x88\xc0\xe2\x1d\x5a\x9b\x1b\xec\xd2\x29\xab\xd3\xb6\xf7\x08\xde\x1e\x64\x86\xcc\x1b\xcc\x42\xd7\xa0\x07\xf8\xe3\x16\x67\x0b\x27\xe0\x73\x2f\x48\x46\x60\xb8\xaf\x47\x4e\x75\x6f\x3a\xd5\xda\xc4\x2a\x9f\x7d\xc4\xd1\xab\xf6\x0b\xed\x7f\x41\xe5\xf7\x6f\xca\x89\xc2\xef\x51\xff\xd7\x7d\xaf\xe5\xf5\xb3\x64\x91\xc3\xf7\x06\x34\x2b\x09\xc6\x93\xd0\xd4\x79\xcd\xbe\x17\xf6\x12\xb9\x6b\x86\x0f\x0b\xfc\xee\xe6\x12\xda\x54\xef\x1e\x20\x91\x7b\x82\xb7\x69\xff\xd2\x34\xed\xf9\x82\xe9\xb7\x7d\x37\x41\xdb\x81\x5c\x34\x85\xf5\x0f\xf1\xdd\x02\x73\x51\xf8\x4c\x65\x8f\x92\x62\x40\x0e\x9d\xce\x79\x8e\x7f\x3c\x8a\x30\x8e\x25\x3f\xfa\x29\x49\xf9\x89\xaf\xa3\x49\xfd\xbb\x3b\xb0\x1e\x5a\x54\x57\xce\x35\x68\x04\xd1\xcf\x9a\x56\xbd\xe7\xf6\x85\x39\x76\x8c\xbd\xe6\xd1\xd9\x3a\xaa\xd5\x4f\x28\x92\x25\x9c\x83\x0b\x14\xed\x6a\xf8\x7b\x5b\xdd\x56\x7f\x07\x00\x00\xff\xff\xe8\x51\x67\xdc\x1c\x1f\x00\x00")

func dataConfig_schema_v21JsonBytes() ([]byte, error) {
	return bindataRead(
		_dataConfig_schema_v21Json,
		"data/config_schema_v2.1.json",
	)
}

func dataConfig_schema_v21Json() (*asset, error) {
	bytes, err := dataConfig_schema_v21JsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/config_schema_v2.1.json", size: 7964, mode: os.FileMode(420), modTime: time.Unix(1461335836, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/config_schema_v2.1.json": dataConfig_schema_v21Json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"config_schema_v2.1.json": &bintree{dataConfig_schema_v21Json, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

